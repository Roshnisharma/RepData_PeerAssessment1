setmean = setmean,
getmean = getmean)
}
2.cacheSolve <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inv) m <<- inv
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
2.cacheSolve <- function(x, ...) {
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inv) m <<- inv
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
2.cacheSolve <- function(x, ...) {
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inv) m <<- inv
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
a<-matrix(1:9,3,3)
a
cmatrix<- makeCacheMatrix(a)
a$get()
cmatrix$get()
cmatrix$set(matrix(9:1,3,3))
cmatrix$get()
acheSolve <- function(x, ...) {
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
cacheSolve <- function(x, ...) {
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
cachesolve(a)
cacheSolve(a)
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inv) m <<- inv
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve <- function(x, ...) {
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
cacheSolve(a)
cacheSolve(cmatrix)
a<-matrix(1:9,3,3)
a
cmatrix<- makeCacheMatrix(a)
cmatrix$get()
cacheSolve(cmatrix)
cacheSolve <- function(x, ...) {
m <- x$getinv()
print m
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
cacheSolve <- function(x, ...) {
m <- x$getinv()
print(m)
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
cacheSolve(cmatrix)
cmatrix$get()
solve(cmatrix)
a<-matrix(1:4,2,2)
cmatrix<- makeCacheMatrix(a)
cmatrix$get()
cacheSolve(cmatrix)
## write a pair of functions that cache the inverse of a matrix.
## The first function, makeVector creates a special "vector", which is really a list containing a function to
##1.set the value of the matrix
##2.get the value of the matrix
##3.set the value of the inverse matrix
##4.get the value of the inverse matrix
## set and get value of matrix
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inv) m <<- inv
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## to calculate inverse of the matrix
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
print(m)
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
git remote add origin https://github.com/RoshniSharma/ProgrammingAssignment2
git status
## This function inverts the matrix
makeCacheMatrix <- function(x = matrix()) {
inver <- NULL
set <- function(z) {
x <<- z
inver <<- NULL
}
get <- function() x
setInverse <- function(inverse) inver <<- inverse
getInverse <- function() inver
list(set=set, get=get, setInverse=setInverse, getInverse=getInverse)
}
## This function returns a matrix that is the inverse of 'x'
cacheSolve <- function(x, ...) {
inver <- NULL
if(!is.null(inver)) {
message("getting the cached data")
return(inver)
}
data <- x$get()
inver <- solve(data)
x$setInverse(inver)
inver
}
a<-matrix(1:4,2,2)
cmatrix<- makeCacheMatrix(a)
cacheSolve(cmatrix)
cmatrix$get()
cacheSolve(a)
cmatrix$get()
library("swirl")
swirl()
setwd("C:/Users/asus/Desktop/Coursera/Reproducible research")
if(!file.exists("./data")){
dir.create("./data")
}
fileUrl1 = "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
if(!file.exists("./data/reviews.csv")) {
download.file(fileUrl1,destfile="./data/ActivityMonitoringData")
dir()
if(!file.exists("./data/ActivityMonitoringData")) {
download.file(fileUrl1,destfile="./data/ActivityMonitoringData")
}
install.packages("rmarkdown")
dir"()"
dir()
monitoring <- unzip("data/ActivityMonitoringData")
dir()
MonitoringData<- read.csv("./data/monitoring")
MonitoringData<- read.csv(./data/monitoring)
MonitoringData<- read.csv(monitoring)
str(MonitoringData)
setwd("C:/Users/asus/RepData_PeerAssessment1")
dir()
activitydata <- read.csv(unzip("activity.zip"))
str(activitydata)
dir()
activitydata <- read.csv("activity.csv"))
activitydata <- read.csv("activity.csv")
head(activitydata)
?summarise
??summarise
stepsperday <- summarise(group_by(activitydata, date), sum(steps))
library(dplyr)
stepsperday <- summarise(group_by(activitydata, date), sum(steps))
head(stepsperday)
hist(stepsperday$sum(step))
hist(stepsperday$`sum(steps)`)
hist(stepsperday$sum(steps), breaks = 25)
hist(stepsperday$`sum(steps)`, breaks = 25)
stepsperday <- summarise(group_by(activitydata, date),totalsteps)
stepsperday <- summarise(group_by(activitydata, date),steps)
stepsperday <- summarise(group_by(activitydata, date),sum(steps))
names(stepsperday)
mean(stepsperday$`sum(steps)`, na.rm= TRUE)
median(stepsperday$`sum(steps)`, na.rm= TRUE)
?as.factor
head(stepsperday)
head(activitydata)
head(activitydata,20)
table(activitydata$steps, activitydata$interval)
table(activitydata$steps, mean(activitydata$interval))
d<- lapply(activitydata,steps,mean(activitydata$interval))
d<- lapply(activitydata,activity$steps,mean(activitydata$interval))
d<- lapply(activitydata,activitydata$steps,mean(activitydata$interval))
names(activitydata)
d<- sapply(activitydata,activitydata$steps,mean(activitydata$interval))
d<- tapply(activitydata,activitydata$steps,mean(activitydata$interval))
d<- tapply(activitydata,mean(activitydata$interval))
d<- tapply(activitydata[1,3],mean(activitydata$interval))
head(d)
meansteps <- summarise(group_by(activitydata, interval),mean(steps))
head(meansteps)
meansteps <- summarise(group_by(activitydata, interval),mean(steps),na.rm= TRUE)
head(meansteps)
meansteps <- summarise(group_by(activitydata, interval),mean(steps,na.rm= TRUE))
head(meansteps)
max(meansteps$`mean(steps, na.rm = TRUE)`)
max_meansteps <- max(meansteps$`mean(steps, na.rm = TRUE)`)
meansteps[max_meansteps,]
max_meansteps <- which.max(meansteps$`mean(steps, na.rm = TRUE)`)
meansteps[max_meansteps,]
m <-meansteps[max_meansteps,]
m[1]
m[1][1]
m[[1]]
m[[[1]]]
missing_vals <- sum(is.na(activitydata$steps))
missing_vals
na_rows <- which(is.na(activitydata$steps))
head(na_rows)
count(nrow())
nrow(na_rows)
count(na_rows)
dim(na_rows)
?lapply
names(activitydata)
type(activitydata$date)
type(activitydate)
type(activitydata)
str(activitydata$date)
lapply(na_rows,findfill = function(x) {
intervalval <- activitydata[x,]$interval
dateval <- activitydata[x,]$date
activitydata$steps1 <- mean(activitydata$steps, activitydata$date == dateval, activitydata$interval == intervalval)
})
lapply(na_rows,FUN = function(x) {
intervalval <- activitydata[x,]$interval
dateval <- activitydata[x,]$date
activitydata$steps1 <- mean(activitydata$steps, activitydata$date == dateval, activitydata$interval == intervalval)
})
mean?
?mean
lapply(na_rows,FUN = function(x) {
intervalval <- activitydata[x,]$interval
dateval <- activitydata[x,]$date
activitydata$steps1 <- meansteps[meansteps$interval == intervalval]$`mean(steps, na.rm = TRUE)`
})
na_replace <- lapply(na_rows,FUN = function(x) {
intervalval <- activitydata[x,]$interval
meansteps[meansteps$interval == intervalval]$`mean(steps, na.rm = TRUE)`
})
na_replace <- unlist(lapply(na_rows,FUN = function(x) {
intervalval <- activitydata[x,]$interval
meansteps[meansteps$interval == intervalval]$`mean(steps, na.rm = TRUE)`
}))
tail(na_rows)
tail(na_rows,20)
tail(na_rows,1000:1050)
tail(na_rows,1000)
?lapply
x <- list(a = 1:10, beta = exp(-3:3), logic = c(TRUE,FALSE,FALSE,TRUE))
# compute the list mean for each list element
lapply(x, mean)
head(na_rows)
na_rowslist <- as.list(na_rows)
dim(na_rowslist)
na_replace <- unlist(lapply(na_rows,FUN = function(x) {
print na_rows[x]
intervalval <- activitydata[x,]$interval
#meansteps[meansteps$interval == intervalval]$`mean(steps, na.rm = TRUE)`
}))
na_replace <- unlist(lapply(na_rows,FUN = function(x) {
print(na_rows[x])
intervalval <- activitydata[x,]$interval
#meansteps[meansteps$interval == intervalval]$`mean(steps, na.rm = TRUE)`
}))
i <- 1
na_replace <- unlist(lapply(na_rows,FUN = function(x) {
i<- i+1
print(i)
intervalval <- activitydata[x,]$interval
#meansteps[meansteps$interval == intervalval]$`mean(steps, na.rm = TRUE)`
}))
na_replace <- unlist(lapply(na_rows,FUN = function(x) {
i<- i+1
intervalval <- activitydata[x,]$interval
#meansteps[meansteps$interval == intervalval]$`mean(steps, na.rm = TRUE)`
}))
print(i)
i<- integer(1)
i
na_replace <- unlist(lapply(na_rows,FUN = function(x) {
i<- i+1
intervalval <- activitydata[x,]$interval
#meansteps[meansteps$interval == intervalval]$`mean(steps, na.rm = TRUE)`
}))
print(i)
na_replace
names(meansteps)
na_replace <- unlist(lapply(na_rows,FUN = function(x) {
intervalval <- activitydata[x,]$interval
meansteps[meansteps$interval == intervalval,]$`mean(steps, na.rm = TRUE)`
}))
na_replace <- unlist(lapply(na_rows,FUN = function(x) {
intervalval <- activitydata[x,]$interval
fillval <- meansteps[meansteps$interval == intervalval,]$`mean(steps, na.rm = TRUE)`
activitydata$steps1[na_rows,] <- fillval
}))
fillval
na_replace <- unlist(lapply(na_rows,FUN = function(x) {
intervalval <- activitydata[x,]$interval
fillval <- meansteps[meansteps$interval == intervalval,]$`mean(steps, na.rm = TRUE)`
print(fillval)
activitydata$steps1[na_rows,] <- fillval
}))
na_replace <- unlist(lapply(na_rows,FUN = function(x) {
intervalval <- activitydata[x,]$interval
fillval <- meansteps[meansteps$interval == intervalval,]$`mean(steps, na.rm = TRUE)`
print(fillval)
activitydata[na_rows,4] <- fillval
}))
names(activitydata)
head(activitydata)
dim(activitydata)
activitydata1 <- activitydata
na_replace <- unlist(lapply(na_rows,FUN = function(x) {
intervalval <- activitydata[x,]$interval
fillval <- meansteps[meansteps$interval == intervalval,]$`mean(steps, na.rm = TRUE)`
print(fillval)
activitydata1[na_rows,1] <- fillval
}))
head(activitydata1)
na_replace <- unlist(lapply(na_rows,FUN = function(x) {
intervalval <- activitydata[x,]$interval
fillval <- meansteps[meansteps$interval == intervalval,]$`mean(steps, na.rm = TRUE)`
activitydata1[x,1] <- fillval
}))
head(activitydata1)
na_replace <- unlist(lapply(na_rows,FUN = function(x) {
print(x)
intervalval <- activitydata[x,]$interval
fillval <- meansteps[meansteps$interval == intervalval,]$`mean(steps, na.rm = TRUE)`
activitydata1[x,1] <- fillval
}))
head(activitydata1)
activitydata1[x,]$steps <- fillval
na_replace <- unlist(lapply(na_rows,FUN = function(x) {
print(x)
intervalval <- activitydata[x,]$interval
fillval <- meansteps[meansteps$interval == intervalval,]$`mean(steps, na.rm = TRUE)`
activitydata1[x,]$steps <- fillval
}))
activitydata1[x,]$steps <- fillval
head(activitydata1)
na_replace <- unlist(lapply(na_rows,FUN = function(1) {
#
intervalval <- activitydata[x,]$interval
fillval <- meansteps[meansteps$interval == intervalval,]$`mean(steps, na.rm = TRUE)`
print(fillval)
activitydata1[x,]$steps <- fillval
}))
na_replace <- unlist(lapply(na_rows,FUN = function(x) {
#
intervalval <- activitydata[x,]$interval
fillval <- meansteps[meansteps$interval == intervalval,]$`mean(steps, na.rm = TRUE)`
print(fillval)
activitydata1[x,]$steps <- fillval
}))
head(activitydata1)
y<- 2
y
activitydata1[x,]$steps <- fillval
na_replace <- unlist(lapply(na_rows,FUN = function(x) {
#
intervalval <- activitydata[x,]$interval
fillval <- meansteps[meansteps$interval == intervalval,]$`mean(steps, na.rm = TRUE)`
activitydata1[x,]$steps <- fillval
}))
head(activitydata1)
na_replace <- unlist(lapply(na_rows,FUN = function(x) {
#
intervalval <- activitydata[x,]$interval
fillval <- meansteps[meansteps$interval == intervalval,]$`mean(steps, na.rm = TRUE)`
}))
activitydata1[na_rows,]$steps <- na_replace
head(activitydata1)
str(activitydata1)
activitydata1[na_rows,]$steps <- na_replace
m1 <- (mean(stepsperday1$`sum(steps)`, na.rm= TRUE)
m1 <- mean(stepsperday1$`sum(steps)`, na.rm= TRUE)
stepsperday1 <- summarise(group_by(activitydata1, date),sum(steps))''
stepsperday1 <- summarise(group_by(activitydata1, date),sum(steps))
m1 <- mean(stepsperday1$`sum(steps)`, na.rm= TRUE)
m1
mm1 <- median(stepsperday1$`sum(steps)`, na.rm= TRUE)
mm1
?weekdays
?mutate
activitydata2 <- activitydata1
mutate(activitydata2, weekd = weekdays(activitydata2$date))
activitydata2$date <- as.date(activitydata2$date)
activitydata2$weekday <- weekdays(as.Date(activitydata2$date)
)
head(activitydata2)
activitydata1$weekday <- ifelse(weekdays(as.Date(activitydata1$date))=="Saturday" | weekdays(as.Date(activitydata1$date))=="Sunday", "weekend", "weekday")
head(activitydata1)
?summarise
activitydata1$weekdayname <- ifelse(weekdays(as.Date(activitydata1$date))=="Saturday" | weekdays(as.Date(activitydata1$date))=="Sunday", "weekend", "weekday")
head(activitydata1)
meanstepsbyweekdays <- activitydata1 %>% group_by(weekdayname, interval) %>% summarise(mean.steps=mean(steps))
xyplot(mean.steps ~ interval| weekdayname, data = meanstepsbyweekdays, type = "l", layout = c(1,2), xlab = "Interval", ylab = "Average stepa taken", main="Average steps taken at 5 min interval compared for weekdays and weekend")
?xyplot
??xyplot
library(ggplot2)
?xyplot
ggplot(meanstepsbyweekdays, aes(x=interval, y= mean.steps))+ geom_line(color = "red")+facet_wrap(~ weekdayname, nrow=2, ncol=1)+labs(x="Interval",y="Average steps taken", main = "Average steps taken at 5 min interval compared for weekdays and weekend")
setwd("C:/Users/asus/RepData_PeerAssessment1")
